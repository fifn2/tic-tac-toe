{"version":3,"sources":["app.js"],"names":["window","addEventListener","getLayout","buttons","document","getElementsByClassName","humanTurnFirst","layout","forEach","button","push","innerText","computerTurn","turnNumber","previous","localHumanTurnFirst","autoClick","$turn","disabled","$allDisableableButtons","_toConsumableArray","filter","element","disableableButton","focus","setTimeout","$squares","thisButton","$corners","indexOfFilledOutCorner","indexOf","corner","$center","randomBelow4","Math","floor","random","randomCorner","square","filledOutCorner","diagonalCorner","identifyDiagonal","cornersExcludingDiagonal","cornersEdges","$edges","unfilledCornersExcludingDiagonal","length","humanLetter","addClickEvents","isHumanTurn","thisSquare","computerLetter","spawnSquares","$mainGame","className","innerHTML","$welcomeButton","setAttribute","concat","type","welcome","replace","split","join","welcomeButton"],"mappings":"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","file":"../app.min.js","sourcesContent":["window.addEventListener('load', () => {\n  // Determine whether you are going first\n  const humanTurnFirst = false;\n\n  const getLayout = () => {\n    // Array of buttons ordered from top-left to bottom right\n    const buttons = [\n      document.getElementsByClassName('corner-top-left')[0],\n      document.getElementsByClassName('edge-top')[0],\n      document.getElementsByClassName('corner-top-right')[0],\n      document.getElementsByClassName('edge-left')[0],\n      document.getElementsByClassName('center-button')[0],\n      document.getElementsByClassName('edge-right')[0],\n      document.getElementsByClassName('corner-bottom-left')[0],\n      document.getElementsByClassName('edge-bottom')[0],\n      document.getElementsByClassName('corner-bottom-right')[0],\n    ];\n    const layout = [];\n    buttons.forEach((button) => {\n      if (!button) { return; }\n      layout.push(button.innerText);\n    });\n    return layout;\n  };\n\n  const computerTurn = (turnNumber, layout, previous, localHumanTurnFirst) => {\n    const autoClick = (button) => {\n      const $turn = document.getElementsByClassName('turn')[0];\n      if (!button || button.disabled) {\n        return;\n      }\n\n      $turn.innerText = 'Not your turn yet...';\n      const $allButtons = [...document.getElementsByClassName('button')];\n      const $allDisableableButtons = $allButtons.filter(\n        element => element !== button && !element.disabled,\n      );\n      $allDisableableButtons.forEach((disableableButton) => {\n        const thisButton = disableableButton;\n        thisButton.disabled = true;\n      });\n      button.focus();\n      setTimeout(() => {\n        button.click();\n        $allDisableableButtons.forEach((disableableButton) => {\n          const thisButton = disableableButton;\n          thisButton.disabled = false;\n        });\n        $turn.innerText = 'Try clicking an empty space.';\n      }, 500);\n    };\n    const $squares = [...document.getElementsByClassName('button')];\n    const $edges = [\n      document.getElementsByClassName('edge')[0],\n      document.getElementsByClassName('edge')[1],\n      document.getElementsByClassName('edge')[2],\n      document.getElementsByClassName('edge')[3],\n    ];\n    const $corners = [\n      document.getElementsByClassName('corner')[0],\n      document.getElementsByClassName('corner')[1],\n      document.getElementsByClassName('corner')[2],\n      document.getElementsByClassName('corner')[3],\n    ];\n    const identifyDiagonal = (corner) => {\n      const indexOfFilledOutCorner = $corners.indexOf(corner);\n      if (indexOfFilledOutCorner === 0) {\n        return $corners[3];\n      }\n      if (indexOfFilledOutCorner === 1) {\n        return $corners[2];\n      }\n      if (indexOfFilledOutCorner === 2) {\n        return $corners[1];\n      }\n      return $corners[0];\n    };\n\n    const $center = document.getElementsByClassName('center-button')[0];\n    /* If the computer is going first,\n    the computer plays a random corner */\n    if (!localHumanTurnFirst) {\n      if (turnNumber === 1) {\n        const randomBelow4 = Math.floor(Math.random() * 4);\n        const randomCorner = $corners[randomBelow4];\n        autoClick(randomCorner);\n      // Computers second turn\n      } else if (turnNumber === 2) {\n        if (\n          $corners.some(corner => !corner)\n          || $squares\n            .filter(\n              square => square.innerText === 'X',\n            ).length === 2\n        ) { return; }\n        // O did not play the center square\n        if (previous !== $center) {\n          /* The corner previously played by X,\n          determined as the top left most one to be filled out with an X. */\n          const filledOutCorner = $corners.filter(\n            corner => corner.innerText === 'X',\n          )[0];\n          /* The index of the filled out corner in the array of corners,\n          which is sorted from top left to bottom right */\n          const indexOfFilledOutCorner = $corners.indexOf(filledOutCorner);\n          // The corner diagonal to the one filled out\n          const diagonalCorner = identifyDiagonal(filledOutCorner);\n          // An array of corners not diagonal to the one filled out\n          // Includes filledOutCorner\n          const cornersExcludingDiagonal = $corners.filter(\n            corner => corner !== diagonalCorner,\n          );\n          // Array of empty corners excluding the one diagonal to\n          // Does *not* include filled out corner\n          const unfilledCornersExcludingDiagonal = cornersExcludingDiagonal.filter(\n            corner => corner.innerText === 'Empty',\n          );\n          // The filled out corner is the top left\n          if (indexOfFilledOutCorner === 0) {\n            // The adjacent edges to the top left corner are:\n            // The top and left edges\n            const cornersEdges = [$edges[0], $edges[1]];\n            // If the top edge is filled out,\n            if (cornersEdges[0].innerText === 'O') {\n              // Fill out the bottom left corner\n              autoClick(unfilledCornersExcludingDiagonal[1]);\n            // If the left edge is filled out,\n            } else if (cornersEdges[1].innerText === 'O') {\n              // Fill out the top right corner\n              autoClick(unfilledCornersExcludingDiagonal[0]);\n            /* Otherwise, if both of the edges are filled out,\n              Flip a coin to determine which adjacent corner to go onto.\n             */\n            } else {\n              autoClick(unfilledCornersExcludingDiagonal[\n                Math.floor(Math.random() * unfilledCornersExcludingDiagonal.length)\n              ]);\n            }\n          // The filled out corner is the top right\n          } else if (indexOfFilledOutCorner === 1) {\n            // The adjacent edges to the top right corner are:\n            // The top and right edges\n            const cornersEdges = [$edges[0], $edges[2]];\n            // If the top edge is filled out,\n            if (cornersEdges[0].innerText === 'O') {\n              // Fill out the bottom right corner\n              autoClick(unfilledCornersExcludingDiagonal[1]);\n            // If the right edge is filled out,\n            } else if (cornersEdges[1].innerText === 'O') {\n              // Fill out the top left corner\n              autoClick(unfilledCornersExcludingDiagonal[0]);\n            /* Otherwise, if both of the edges are filled out,\n              Flip a coin to determine which adjacent corner to go onto.\n             */\n            } else {\n              autoClick(unfilledCornersExcludingDiagonal[\n                Math.floor(Math.random() * unfilledCornersExcludingDiagonal.length)\n              ]);\n            }\n          // The filled out corner is the bottom left\n          } else if (indexOfFilledOutCorner === 2) {\n            // The adjacent edges to the bottom left corner are:\n            // The left and bottom edges\n            const cornersEdges = [$edges[1], $edges[3]];\n            // If the left edge is filled out,\n            if (cornersEdges[0].innerText === 'O') {\n              // Fill out the bottom right corner\n              autoClick(unfilledCornersExcludingDiagonal[1]);\n            // If the bottom edge is filled out,\n            } else if (cornersEdges[1].innerText === 'O') {\n              // Fill out the top left corner\n              autoClick(unfilledCornersExcludingDiagonal[0]);\n            /* Otherwise, if both of the edges are filled out,\n              Flip a coin to determine which adjacent corner to go onto.\n             */\n            } else {\n              autoClick(unfilledCornersExcludingDiagonal[\n                Math.floor(Math.random() * unfilledCornersExcludingDiagonal.length)\n              ]);\n            }\n          // The filled out corner is the bottom right\n          } else {\n            // The adjacent edges to the bottom right corner are:\n            // The right and bottom edges\n            const cornersEdges = [$edges[2], $edges[3]];\n            // If the right edge is filled out,\n            if (cornersEdges[0].innerText === 'O') {\n              // Fill out the bottom left corner\n              autoClick(unfilledCornersExcludingDiagonal[1]);\n            // If the bottom edge is filled out,\n            } else if (cornersEdges[1].innerText === 'O') {\n              // Fill out the top right corner\n              autoClick(unfilledCornersExcludingDiagonal[0]);\n            /* Otherwise, if both of the edges are filled out,\n              Flip a coin to determine which adjacent corner to go onto.\n             */\n            } else {\n              autoClick(unfilledCornersExcludingDiagonal[\n                Math.floor(Math.random() * unfilledCornersExcludingDiagonal.length)\n              ]);\n            }\n          }\n        // O played the center square\n        } else {\n          /* The corner previously played by X,\n          determined as the top left most one to be filled out with an X. */\n          const filledOutCorner = $corners.filter(\n            corner => corner.innerText === 'X',\n          )[0];\n          // The corner diagonal to the one filled out\n          const diagonalCorner = identifyDiagonal(filledOutCorner);\n          // Play the corner diagonal to the one one filled out\n          autoClick(diagonalCorner);\n        }\n      } else if (turnNumber === 3) {\n        // I really wanted to finish, but I had a deadline :(\n        // eslint-disable-next-line no-use-before-define\n        welcome(localHumanTurnFirst, 'thats all for now');\n      }\n    }\n  };\n  const addClickEvents = (localHumanTurnFirst, isHumanTurn, turnNumber) => {\n    const humanLetter = localHumanTurnFirst ? 'X' : 'O';\n    const computerLetter = localHumanTurnFirst ? 'O' : 'X';\n    const $squares = [...document.getElementsByClassName('button')];\n    $squares.forEach((square) => {\n      const thisSquare = square;\n      square.addEventListener('click', () => {\n        if (isHumanTurn) {\n          thisSquare.innerText = humanLetter;\n          computerTurn(\n            turnNumber,\n            getLayout(),\n            thisSquare,\n            localHumanTurnFirst,\n          );\n          addClickEvents(localHumanTurnFirst, false, turnNumber);\n        } else {\n          thisSquare.innerText = computerLetter;\n          if (turnNumber < 3) {\n            addClickEvents(localHumanTurnFirst, true, turnNumber + 1);\n          }\n        }\n        thisSquare.disabled = true;\n      });\n    });\n  };\n  const welcomeButton = (localHumanTurnFirst) => {\n    const spawnSquares = () => {\n      const $turn = document.getElementsByClassName('turn')[0];\n      const $mainGame = document.getElementsByClassName('main-game')[0];\n      $turn.innerText = 'Try clicking an empty space.';\n      $mainGame.className = 'main-game dp-4 tic-tac-toe';\n      $mainGame.setAttribute('aria-label', 'Tic-tac-toe grid');\n      $mainGame.innerHTML = '<button class=\"button corner corner-top-left corner-top corner-left\">Empty</button><button class=\"button edge edge-top\">Empty</button><button class=\"button corner corner-top-right corner-top corner-right\">Empty</button><button class=\"button edge edge-left\">Empty</button><button class=\"button center-button\">Empty</button><button class=\"button edge edge-right\">Empty</button><button class=\"button corner corner-bottom-left corner-bottom corner-left\">Empty</button><button class=\"button edge edge-bottom\">Empty</button><button class=\"button corner corner-bottom-right corner-bottom corner-right\">Empty</button>';\n      if (!localHumanTurnFirst) {\n        addClickEvents(false, false, 1);\n        computerTurn(1, getLayout(), false, false);\n      } else {\n        addClickEvents(true, true, 0);\n      }\n    };\n    const $welcomeButton = document.getElementsByClassName('start-button')[0];\n    $welcomeButton.addEventListener('click', () => spawnSquares(localHumanTurnFirst));\n  };\n\n  const welcome = (localHumanTurnFirst, type) => {\n    const $mainGame = document.getElementsByClassName('main-game')[0];\n    const $turn = document.getElementsByClassName('turn')[0];\n    $turn.innerText = type === 'welcome' ? 'Welcome!' : 'That\\'s all for now, folks.';\n    $mainGame.className = 'main-game dp-4 welcome center';\n    $mainGame.innerHTML = `\n      <section class=\"center welcome-section\">\n        <h2 class=\"heading welcome-heading\">\n          ${type === 'welcome'\n    ? `\n      Welcome to unbeatable tic-tac-toe by\n      <a href=\"https://github.com/fifn2\">fifn2</a>!\n    `\n    : 'Hopefully someday I\\'ll find the bug.'}\n        </h2>\n        <p class=\"paragraph welcome-text\">\n          ${type === 'welcome'\n    ? 'Your turn will be second to the computer for a while, but that might change in the future.'\n    : 'Right now, the computer only knows how to go this far. This may change in the future.'}\n          Have fun and feel free to look at the\n          <a href=\"https://github.com/fifn2/tic-tac-toe\" rel=\"external\">source code</a>\n          if you're curious, and if you find any issues, or have any suggestions,\n           I'd really appreciate you taking the time to tell me\n          <a href=\"https://github.com/fifn2/tic-tac-toe/issues/new\" rel=\"external\">here</a>.\n          ${type === 'welcome' ? 'Without further adieu,' : 'If you feel like it,'}\n          <strong class=\"bold\">\n            ${type === 'welcome'\n    ? 'press the \"Start\" button to play.'\n    : 'reload the page to start again.'}\n          </strong>\n        </p>\n      </section>\n      ${type === 'welcome'\n    ? `\n        <div role=\"none\" class=\"center start-button-container\">\n          <button class=\"start-button button\">Start</button>\n        </div>\n      `\n    : ''}\n    `.replace(/\\s{2}/g, '').split('\\n').join('');\n    if (type !== 'welcome') { return; }\n    welcomeButton(localHumanTurnFirst);\n  };\n\n  welcome(humanTurnFirst, 'welcome');\n});\n"]}