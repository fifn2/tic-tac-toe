{"version":3,"sources":["app.js"],"names":["window","addEventListener","getLayout","buttons","document","getElementsByClassName","humanTurnFirst","layout","forEach","button","push","innerText","computerTurn","turnNumber","previous","localHumanTurnFirst","autoClick","disabled","$turn","$allDisableableButtons","_toConsumableArray","filter","element","disableableButton","focus","thisButton","$edges","$corners","identifyDiagonal","indexOfFilledOutCorner","indexOf","corner","$center","Math","floor","random","randomBelow4","filledOutCorner","unfilledCornersExcludingDiagonal","diagonalCorner","cornersEdges","length","welcome","computerLetter","$squares","square","isHumanTurn","humanLetter","thisSquare","addClickEvents","welcomeButton","spawnSquares","$mainGame","setAttribute","innerHTML","$welcomeButton","className","type"],"mappings":"2WAAAA,OAAOC,iBAAiB,OAAQ,WAE9B,IAEMC,EAAY,WAEhB,IAAMC,EAAU,CACdC,SAASC,uBAAuB,mBAAmB,GACnDD,SAASC,uBAAuB,YAAY,GAC5CD,SAASC,uBAAuB,oBAAoB,GATpDD,SAACH,uBAAyB,aAAM,GACpCG,SAAAC,uBAAA,iBAAA,GACMC,SAAAA,uBAAN,cAAA,GAWIF,SAASC,uBAAuB,sBAAsB,GATpDH,SAASG,uBAAG,eAAM,GACtBD,SAAAC,uBAAA,uBAAA,IAYME,EAAN,GACsB,OAAtBJ,EAAQK,QAAQ,SAAAC,GAAA,OAAAA,EAAMC,KAAAD,EAAAE,aAAAJ,GAdxBK,EAAA,SAAAA,EAAAC,EAAAN,EAAAO,EAAAC,GAmBE,IAAMC,EAAY,SAACP,GADfG,IAAAA,EAAYR,SAAGC,uBAACQ,QAAYN,GAChC,GAAMS,IAAYP,EAAAQ,SAAlB,CAGIC,EAAAP,UAAA,uBACD,IAIKQ,EAJLC,EAAAhB,SAAAC,uBAAA,WAI0CgB,OAF3CH,SAAAA,GAAMP,OAAAA,IAAYF,IAAAa,EAAlBL,WACAE,EAAiBX,QAAA,SAAAe,GAKIA,EAJfJ,UAAAA,IACGV,EADTe,QAGAL,WAAAA,WACEV,EAAMgB,QACNA,EAAsBjB,QAAtB,SAAAe,GAFFA,EAIAN,UAAA,IAEER,EAAME,UAAN,gCACAQ,OAEEM,EAAAA,CACDrB,SAHDC,uBAAA,QAAA,GAIAa,SAAMP,uBAAY,QAAA,GACnBP,SAPDC,uBAAA,QAAA,GAhBFD,SAAAC,uBAAA,QAAA,IAyBMqB,EACJtB,CAKFA,SAAMuB,uBACKtB,UAAAA,GACTD,SAASC,uBAAuB,UAAU,GAI5CD,SAAMwB,uBAAAA,UAAAA,GACJxB,SAAMyB,uBAAyBF,UAASG,IACpCD,EAAAA,SAAAA,GACF,IAAAA,EAAAF,EAAAG,QAAAC,GACD,OAAA,IAAAF,EADQF,EAAS,GAGhB,IAAAE,EACDF,EAAA,GAC8B,IAA3BE,EACKF,EAAS,GAEXA,EAAS,IAGZK,EAAU5B,SAASC,uBAAuB,iBAAiB,GAGjE,IAAKU,EACH,GAAmB,IAAfF,EAAkB,CADpB,IAACE,EAALkB,KAA0BC,MAAA,EAAAD,KAAAE,UAEtBnB,EADoBW,EAAAS,SAGpBpB,GAHoB,IAGXH,EAGT,GAAAC,IAAAkB,EAAA,CAIE,IAAMK,EAAkBV,EAASN,OAAjC,SAAAU,GAAMM,MAA2BhB,MAA3BgB,EAAe1B,YACb,GAIFkB,EAAyBF,EAASG,QAAQO,GAA1CR,EAAAA,EAAkCC,GASxCQ,EALAX,EAAAN,OAEE,SAAAU,GAAM,OAAIA,IAAWQ,IAGvBlB,OAEE,SAAAU,GAAM,MAAyB,UAArBA,EAAOpB,YAAX,GAER,IAAAkB,EAAA,CAEE,IAAAW,EAAA,CAAAd,EAAA,GAAAA,EAAA,IAEiCA,MAA3Bc,EAAY,GAAId,UAEtBV,EAAIwB,EAAmC,IAE3BF,MAADE,EAACF,GAAAA,UAGVtB,EAAAsB,EAAA,IADKtB,EAMAsB,EACLtB,KAAAA,MAAUsB,KAAAA,SAAAA,EACQH,eAKpB,GAAA,IAAAN,EAAA,CAEA,IAAMW,EAAe,CAACd,EAAO,GAAIA,EAAO,IAGtC,MAAAc,EAAA,GAAA7B,UADFK,EAIWwB,EAAJ,IAEKF,MAADE,EAACF,GAAAA,UAAVtB,EAAUsB,EAAiC,IAK3CtB,EAAUsB,EAhBPL,KAqBIJ,MAAAA,KAAAA,SAAsBS,EAAQG,eAAlC,GAA+B,IAA3BZ,EAA8B,CAOrCb,IAAAA,EAAUsB,CAAAA,EAAAA,GAAAA,EAAAA,IAGV,MAAAE,EAAA,GAAA7B,UAEFK,EAAAsB,EAAA,IAHyC,MAA9BE,EAAa,GAAG7B,UAOzBK,EAAUsB,EACRL,IAMJjB,EAAAsB,EACME,KAAAA,MAAAA,KAAYL,SAAGG,EACrBG,cAGEzB,CAIAA,IAAAA,EAAUsB,CAAAA,EAAAA,GAAAA,EAAAA,IANsB,MAA9BE,EAAa,GAAG7B,UAIbK,EAMAsB,EAAA,IAIN,MAAAE,EAAA,GAAA7B,UARCK,EAAUsB,EAAiC,IAevCtB,EAAIe,EAJPE,KAMLC,MAAAD,KAAAE,SAAAG,EAAAG,eAGAzB,CASLA,EAF4BY,EAJzBD,EAAAN,OACA,SAAAU,GAAA,MAAA,MAAAA,EAAApB,YACA+B,UAHwB,IAAf7B,EAWP8B,EAAAA,EAAiB5B,qBAPG,EAAbF,GAQP+B,EAAQ,EAAA1C,KAAA,EAAOE,IAGnByC,EAAO5C,SAAP4C,EAAO5C,EAA0B6C,EAAMjC,GACrC,IAAAkC,EAAAhC,EAAiB,IAAA,IACfiC,EAAWrC,EAAX,IAAA,IACAC,EACEC,SADUR,uBAGV2C,WAGFC,QAAAA,SAAAA,GACD,IATDD,EASOH,EACLG,EAAAA,iBAAA,QAAuBL,WAVrBG,GAWFE,EAAInC,UAAgBkC,EAClBE,EACDpC,EACFX,IATG8C,EAUJA,GAlBJC,EAAAlC,GAAA,EAAAF,KAaMmC,EAAWrC,UAAYgC,EASzBO,EAAgB,GACdC,EAAepC,GAAM,EAAAF,EAAA,IAGzBK,EAAMP,UAAY,OAJhBuC,EAAgB,SAACnC,GAmBjB2B,SAAW3B,uBAAD,gBAA+B,GAC9Bd,iBAAYI,QAAAA,WAAAA,OAXvB4C,EAAAA,SAAc5C,uBAAd,QAAA,GACAO,EAAgBV,SAASG,uBAAzB,aAAA,GACDa,EAHDP,UAGO,+BACLsC,EAAAA,UAAc,6BACfG,EAAAC,aAAA,aAAA,oBAZHD,EAAAE,UAAA,ymBAOOvC,EAQPkC,GAAA,GAAA,EAAA,IADMM,GAAc,GAAGnD,EAASC,GAChCkD,EAAetD,EAAAA,KAAiB,GAAhC,KAROc,IACHkC,EACArC,KAaJwC,EAAUI,SAAAA,EAAYC,GACtBL,IAAAA,EAAUE,SAAVjD,uBAAA,aAAA,GACcU,SAAAA,uBAAd,QAAA,GANFJ,UAAA,YAAA8C,EAAA,WAAA,4BAIEL,EAAUI,UAAY,gCAKxBd,EAAQpC,UAARoC,wMAAAA,OAAA,YAAAe,EAAA,6FAAA,wFAAAf,2UAAAA,OAAA,YAAAe,EAAA,yBAAA,uBAAAf,oCAAAA,OAAA,YAAAe,EAAA,UAAA,gBAAAf,sJAAAA,OAAA,YAAAe,EAAA,QAAA,cAAAf,mBA1QFQ,EAAAnC,IA0QE2B,GAxQuB,EAwQC","file":"../app.min.js","sourcesContent":["window.addEventListener('load', () => {\n  // Determine whether you are going first\n  const humanTurnFirst = false;\n\n  const getLayout = () => {\n    // Array of buttons ordered from top-left to bottom right\n    const buttons = [\n      document.getElementsByClassName('corner-top-left')[0],\n      document.getElementsByClassName('edge-top')[0],\n      document.getElementsByClassName('corner-top-right')[0],\n      document.getElementsByClassName('edge-left')[0],\n      document.getElementsByClassName('center-button')[0],\n      document.getElementsByClassName('edge-right')[0],\n      document.getElementsByClassName('corner-bottom-left')[0],\n      document.getElementsByClassName('edge-bottom')[0],\n      document.getElementsByClassName('corner-bottom-right')[0],\n    ];\n    const layout = [];\n    buttons.forEach(button => layout.push(button.innerText));\n    return layout;\n  };\n\n  const computerTurn = (turnNumber, layout, previous, localHumanTurnFirst) => {\n    const autoClick = (button) => {\n      const $turn = document.getElementsByClassName('turn')[0];\n      if (!button || button.disabled) {\n        return;\n      }\n\n      $turn.innerText = 'Not your turn yet...';\n      const $allButtons = [...document.getElementsByClassName('button')];\n      const $allDisableableButtons = $allButtons.filter(\n        element => element !== button && !element.disabled,\n      );\n      $allDisableableButtons.forEach((disableableButton) => {\n        const thisButton = disableableButton;\n        thisButton.disabled = true;\n      });\n      button.focus();\n      setTimeout(() => {\n        button.click();\n        $allDisableableButtons.forEach((disableableButton) => {\n          const thisButton = disableableButton;\n          thisButton.disabled = false;\n        });\n        $turn.innerText = 'Try clicking an empty space.';\n      }, 500);\n    };\n    const $edges = [\n      document.getElementsByClassName('edge')[0],\n      document.getElementsByClassName('edge')[1],\n      document.getElementsByClassName('edge')[2],\n      document.getElementsByClassName('edge')[3],\n    ];\n    const $corners = [\n      document.getElementsByClassName('corner')[0],\n      document.getElementsByClassName('corner')[1],\n      document.getElementsByClassName('corner')[2],\n      document.getElementsByClassName('corner')[3],\n    ];\n    const identifyDiagonal = (corner) => {\n      const indexOfFilledOutCorner = $corners.indexOf(corner);\n      if (indexOfFilledOutCorner === 0) {\n        return $corners[3];\n      }\n      if (indexOfFilledOutCorner === 1) {\n        return $corners[2];\n      }\n      if (indexOfFilledOutCorner === 2) {\n        return $corners[1];\n      }\n      return $corners[0];\n    };\n\n    const $center = document.getElementsByClassName('center-button')[0];\n    /* If the computer is going first,\n    the computer plays a random corner */\n    if (!localHumanTurnFirst) {\n      if (turnNumber === 1) {\n        const randomBelow4 = Math.floor(Math.random() * 4);\n        const randomCorner = $corners[randomBelow4];\n        autoClick(randomCorner);\n      // Computers second turn\n      } else if (turnNumber === 2) {\n        // O did not play the center square\n        if (previous !== $center) {\n          /* The corner previously played by X,\n          determined as the top left most one to be filled out with an X. */\n          const filledOutCorner = $corners.filter(\n            corner => corner.innerText === 'X',\n          )[0];\n          /* The index of the filled out corner in the array of corners,\n          which is sorted from top left to bottom right */\n          const indexOfFilledOutCorner = $corners.indexOf(filledOutCorner);\n          // The corner diagonal to the one filled out\n          const diagonalCorner = identifyDiagonal(filledOutCorner);\n          // An array of corners not diagonal to the one filled out\n          // Includes filledOutCorner\n          const cornersExcludingDiagonal = $corners.filter(\n            corner => corner !== diagonalCorner,\n          );\n          // Array of empty corners excluding the one diagonal to\n          // Does *not* include filled out corner\n          const unfilledCornersExcludingDiagonal = cornersExcludingDiagonal.filter(\n            corner => corner.innerText === 'Empty',\n          );\n          // The filled out corner is the top left\n          if (indexOfFilledOutCorner === 0) {\n            // The adjacent edges to the top left corner are:\n            // The top and left edges\n            const cornersEdges = [$edges[0], $edges[1]];\n            // If the top edge is filled out,\n            if (cornersEdges[0].innerText === 'O') {\n              // Fill out the bottom left corner\n              autoClick(unfilledCornersExcludingDiagonal[1]);\n            // If the left edge is filled out,\n            } else if (cornersEdges[1].innerText === 'O') {\n              // Fill out the top right corner\n              autoClick(unfilledCornersExcludingDiagonal[0]);\n            /* Otherwise, if both of the edges are filled out,\n              Flip a coin to determine which adjacent corner to go onto.\n             */\n            } else {\n              autoClick(unfilledCornersExcludingDiagonal[\n                Math.floor(Math.random() * unfilledCornersExcludingDiagonal.length)\n              ]);\n            }\n          // The filled out corner is the top right\n          } else if (indexOfFilledOutCorner === 1) {\n            // The adjacent edges to the top right corner are:\n            // The top and right edges\n            const cornersEdges = [$edges[0], $edges[2]];\n            // If the top edge is filled out,\n            if (cornersEdges[0].innerText === 'O') {\n              // Fill out the bottom right corner\n              autoClick(unfilledCornersExcludingDiagonal[1]);\n            // If the right edge is filled out,\n            } else if (cornersEdges[1].innerText === 'O') {\n              // Fill out the top left corner\n              autoClick(unfilledCornersExcludingDiagonal[0]);\n            /* Otherwise, if both of the edges are filled out,\n              Flip a coin to determine which adjacent corner to go onto.\n             */\n            } else {\n              autoClick(unfilledCornersExcludingDiagonal[\n                Math.floor(Math.random() * unfilledCornersExcludingDiagonal.length)\n              ]);\n            }\n          // The filled out corner is the bottom left\n          } else if (indexOfFilledOutCorner === 2) {\n            // The adjacent edges to the bottom left corner are:\n            // The left and bottom edges\n            const cornersEdges = [$edges[1], $edges[3]];\n            // If the left edge is filled out,\n            if (cornersEdges[0].innerText === 'O') {\n              // Fill out the bottom right corner\n              autoClick(unfilledCornersExcludingDiagonal[1]);\n            // If the bottom edge is filled out,\n            } else if (cornersEdges[1].innerText === 'O') {\n              // Fill out the top left corner\n              autoClick(unfilledCornersExcludingDiagonal[0]);\n            /* Otherwise, if both of the edges are filled out,\n              Flip a coin to determine which adjacent corner to go onto.\n             */\n            } else {\n              autoClick(unfilledCornersExcludingDiagonal[\n                Math.floor(Math.random() * unfilledCornersExcludingDiagonal.length)\n              ]);\n            }\n          // The filled out corner is the bottom right\n          } else {\n            // The adjacent edges to the bottom right corner are:\n            // The right and bottom edges\n            const cornersEdges = [$edges[2], $edges[3]];\n            // If the right edge is filled out,\n            if (cornersEdges[0].innerText === 'O') {\n              // Fill out the bottom left corner\n              autoClick(unfilledCornersExcludingDiagonal[1]);\n            // If the bottom edge is filled out,\n            } else if (cornersEdges[1].innerText === 'O') {\n              // Fill out the top right corner\n              autoClick(unfilledCornersExcludingDiagonal[0]);\n            /* Otherwise, if both of the edges are filled out,\n              Flip a coin to determine which adjacent corner to go onto.\n             */\n            } else {\n              autoClick(unfilledCornersExcludingDiagonal[\n                Math.floor(Math.random() * unfilledCornersExcludingDiagonal.length)\n              ]);\n            }\n          }\n        // O played the center square\n        } else {\n          /* The corner previously played by X,\n          determined as the top left most one to be filled out with an X. */\n          const filledOutCorner = $corners.filter(\n            corner => corner.innerText === 'X',\n          )[0];\n          // The corner diagonal to the one filled out\n          const diagonalCorner = identifyDiagonal(filledOutCorner);\n          // Play the corner diagonal to the one one filled out\n          autoClick(diagonalCorner);\n        }\n      } else if (turnNumber === 3) {\n        // I really wanted to finish, but I had a deadline :(\n        // eslint-disable-next-line no-use-before-define\n        welcome(localHumanTurnFirst, 'thats all for now');\n      } else if (turnNumber > 3) {\n        computerTurn(1, getLayout(), false, localHumanTurnFirst);\n      }\n    }\n  };\n  const addClickEvents = (localHumanTurnFirst, isHumanTurn, turnNumber) => {\n    const humanLetter = localHumanTurnFirst ? 'X' : 'O';\n    const computerLetter = localHumanTurnFirst ? 'O' : 'X';\n    const $squares = [...document.getElementsByClassName('button')];\n    $squares.forEach((square) => {\n      const thisSquare = square;\n      square.addEventListener('click', () => {\n        if (isHumanTurn) {\n          thisSquare.innerText = humanLetter;\n          computerTurn(\n            turnNumber,\n            getLayout(),\n            thisSquare,\n            localHumanTurnFirst,\n          );\n          addClickEvents(localHumanTurnFirst, false, turnNumber);\n        } else {\n          thisSquare.innerText = computerLetter;\n          if (turnNumber < 3) {\n            addClickEvents(localHumanTurnFirst, true, turnNumber + 1);\n          }\n        }\n        thisSquare.disabled = true;\n      });\n    });\n  };\n  const welcomeButton = (localHumanTurnFirst) => {\n    const spawnSquares = () => {\n      const $turn = document.getElementsByClassName('turn')[0];\n      const $mainGame = document.getElementsByClassName('main-game')[0];\n      $turn.innerText = 'Try clicking an empty space.';\n      $mainGame.className = 'main-game dp-4 tic-tac-toe';\n      $mainGame.setAttribute('aria-label', 'Tic-tac-toe grid');\n      $mainGame.innerHTML = '<button class=\"button corner corner-top-left corner-top corner-left\">Empty</button><button class=\"button edge edge-top\">Empty</button><button class=\"button corner corner-top-right corner-top corner-right\">Empty</button><button class=\"button edge edge-left\">Empty</button><button class=\"button center-button\">Empty</button><button class=\"button edge edge-right\">Empty</button><button class=\"button corner corner-bottom-left corner-bottom corner-left\">Empty</button><button class=\"button edge edge-bottom\">Empty</button><button class=\"button corner corner-bottom-right corner-bottom corner-right\">Empty</button>';\n      if (!localHumanTurnFirst) {\n        addClickEvents(false, false, 1);\n        computerTurn(1, getLayout(), false, false);\n      } else {\n        addClickEvents(true, true, 0);\n      }\n    };\n    const $welcomeButton = document.getElementsByClassName('start-button')[0];\n    $welcomeButton.addEventListener('click', () => spawnSquares(localHumanTurnFirst));\n  };\n\n  const welcome = (localHumanTurnFirst, type) => {\n    const $mainGame = document.getElementsByClassName('main-game')[0];\n    const $turn = document.getElementsByClassName('turn')[0];\n    $turn.innerText = type === 'welcome' ? 'Welcome!' : 'That\\'s all for now folks.';\n    $mainGame.className = 'main-game dp-4 welcome center';\n    $mainGame.innerHTML = `<section class=\"center welcome-section\"><h2 class=\"heading welcome-heading\">Welcome to unbeatable tic-tac-toe by <a href=\"https://github.com/fifn2\">fifn2</a>!</h2><p class=\"paragraph welcome-text\">${type === 'welcome' ? 'Your turn will be second to the computer for a while, but that might change in the future.' : 'Right now, the computer only knows how to go this far. This may change in the future.'} Have fun and feel free to look at the <a href=\"https://github.com/fifn2/tic-tac-toe\" rel=\"external\">source code</a> if you're curious, and if you find any issues, or have any suggestions, I'd really appreciate you taking the time to tell me <a href=\"https://github.com/fifn2/tic-tac-toe/issues/new\" rel=\"external\">here</a>. ${type === 'welcome' ? 'Without further adieu,' : 'If you feel like it,'} <strong class=\"bold\">press the ${type === 'welcome' ? '\"Start\"' : '\"Play Again?\"'} button below to start the game!</strong></p></section><div role=\"none\" class=\"center start-button-container\"><button class=\"start-button button\">${type === 'welcome' ? 'Start' : 'Play Again?'}</button></div>`;\n    welcomeButton(localHumanTurnFirst);\n  };\n\n  welcome(humanTurnFirst, 'welcome');\n});\n"]}